<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XMMWC&#39;s Blog</title>
  <subtitle>note</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xmmwc.github.io/"/>
  <updated>2016-08-29T15:11:11.000Z</updated>
  <id>http://xmmwc.github.io/</id>
  
  <author>
    <name>XMMWC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript模块</title>
    <link href="http://xmmwc.github.io/2016/08/29/Javascript%E6%A8%A1%E5%9D%97/"/>
    <id>http://xmmwc.github.io/2016/08/29/Javascript模块/</id>
    <published>2016-08-29T14:40:17.000Z</published>
    <updated>2016-08-29T15:11:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前这些模式都用过,但是经验缺乏的我当时并没有和这些如<code>模块模式</code>,<code>对象字面量</code>,<code>构造函数</code>这些专有名词对应上。突然在书上看到,在这里整理下。</p>
</blockquote>
<a id="more"></a>
<h3 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someFn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="string">'someString'</span>;</div><div class="line">    <span class="keyword">var</span> j = &#123;</div><div class="line">        text: <span class="string">'i am some Object'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> printSomeString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> getSomeString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> getSomeObject = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> j;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        printSomeString: printSomeString,</div><div class="line">        getSomeString: getSomeString,</div><div class="line">        getSomeObject: getSomeObject</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = someFn();</div><div class="line"><span class="keyword">var</span> b = someFn();</div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> someFn();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a === b);<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(a === c);<span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a.getSomeString() === b.getSomeString());<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(a.getSomeString() === c.getSomeString());<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a.getSomeObject() === b.getSomeObject());<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(a.getSomeObject() === c.getSomeObject());<span class="comment">//false</span></div></pre></td></tr></table></figure>
<blockquote>
<p>“代码中有一个叫作<code>someFn()</code>的独立的模块创建器，可以被调用任意多次，每次调用都会创建一个新的模块实例。”</p>
</blockquote>
<p>摘录来自: Kyle Simpson、赵望野、梁杰. “你不知道的JavaScript（上卷）” [有改动]。 </p>
<blockquote>
<p>如果构造函数中返回了一个对象，那么new出来的对象将会被返回的对象覆盖。模块模式的结果是<code>a</code>和<code>b</code>都从返回的对象copy了一份属性和方法，它们之间互不影响。继承关系也变了，<code>a</code>和<code>b</code>都直接继承于Object</p>
</blockquote>
<p><strong> 问：这里面的<code>someFn()</code>和<code>new someFn()</code>有啥区别？ </strong></p>
<p>Module模式的还是存在一定的不足：</p>
<ol>
<li>由于我们访问公有和私有成员的方式不同，当我们想改变可见性时，实际上我们必须修改每一个曾经使用过该成员的存在。 </li>
<li>我们无法访问那些之后在方法里面添加的私有成员， </li>
<li>无法为私有成员创建自动化单元测试，bug需要修正补丁时会增加额外的复杂性。 </li>
<li>开发人员无法轻易地扩展私有方法</li>
</ol>
<h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oneModule = &#123;</div><div class="line">    var1: <span class="number">1</span>,</div><div class="line">    var2: <span class="string">'a'</span>,</div><div class="line">    method1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.var1;</div><div class="line">    &#125;,</div><div class="line">    method2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.var1 + <span class="keyword">this</span>.var2;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>不足：没办法有私有成员</p>
<h3 id="构造函数方式"><a href="#构造函数方式" class="headerlink" title="构造函数方式"></a>构造函数方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> twoModule = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'two'</span>;</div><div class="line">    <span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="prototype原型方式"><a href="#prototype原型方式" class="headerlink" title="prototype原型方式"></a>prototype原型方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> twoModule = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'two'</span>;</div><div class="line">    <span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.method1 = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">twoModule.prototype.method1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.method(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>值得注意的是<code>method</code>和<code>method1</code>都属于<code>twoModule</code>的方法<br>而<code>method1</code>也属于<code>twoModule</code>的<code>prototype</code>上的方法，但是<code>twoModule.prototype.method1.prototype</code>指向的是<code>twoModule.method1</code></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前这些模式都用过,但是经验缺乏的我当时并没有和这些如&lt;code&gt;模块模式&lt;/code&gt;,&lt;code&gt;对象字面量&lt;/code&gt;,&lt;code&gt;构造函数&lt;/code&gt;这些专有名词对应上。突然在书上看到,在这里整理下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6记一下</title>
    <link href="http://xmmwc.github.io/2016/08/28/ES6%E8%AE%B0%E4%B8%80%E4%B8%8B/"/>
    <id>http://xmmwc.github.io/2016/08/28/ES6记一下/</id>
    <published>2016-08-28T14:32:17.000Z</published>
    <updated>2016-08-28T16:03:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="let-and-const"><a href="#let-and-const" class="headerlink" title="let and const"></a>let and const</h2><blockquote>
<p>函数级作用域</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> hello = <span class="string">'world'</span>;</div><div class="line">  <span class="built_in">console</span>.log(hello);</div><div class="line">&#125;</div><div class="line">test(); <span class="comment">// 'world'</span></div><div class="line"><span class="built_in">console</span>.log(hello); <span class="comment">// Error: hello is not defined</span></div></pre></td></tr></table></figure>
<blockquote>
<p>块级作用域</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">var</span> hello = <span class="string">'world'</span>;</div><div class="line">  <span class="built_in">console</span>.log(hello); <span class="comment">// 'world'</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(hello); <span class="comment">// 'world'</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="var-命令"><a href="#var-命令" class="headerlink" title="var 命令"></a>var 命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">var</span> hello = <span class="string">'world'</span>;</div><div class="line">  <span class="built_in">console</span>.log(hello); <span class="comment">// 'world'</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(hello); <span class="comment">// 'world'</span></div></pre></td></tr></table></figure>
<h3 id="let-命令"><a href="#let-命令" class="headerlink" title="let 命令"></a>let 命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">let</span> hello = <span class="string">'world'</span>;</div><div class="line">  <span class="built_in">console</span>.log(hello); <span class="comment">// 'world'</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(hello); <span class="comment">// Error: hello is not defined</span></div></pre></td></tr></table></figure>
<h3 id="const-命令"><a href="#const-命令" class="headerlink" title="const 命令"></a>const 命令</h3><p>使用 const 命令声明常量</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> STATUS_NOT_FOUND = <span class="number">404</span>;</div></pre></td></tr></table></figure>
<p>常量的值为只读，不能修改</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">STATUS_NOT_FOUND = <span class="number">200</span>;</div><div class="line"><span class="comment">// SyntaxError: "STATUS_NOT_FOUND" is read-only</span></div></pre></td></tr></table></figure>
<h2 id="Template-String"><a href="#Template-String" class="headerlink" title="Template String"></a>Template String</h2><p>传统的字符串</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'es6'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> sayhello = <span class="string">'hello, \</div><div class="line">my name is '</span> + name + <span class="string">'.'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(sayhello);</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello, my name is es6.</div></pre></td></tr></table></figure>
<p>ES6 模板字符串</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'es6'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> sayhello = <span class="string">`hello,</div><div class="line">my name is <span class="subst">$&#123;name&#125;</span>.`</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(sayhello);</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hello,</div><div class="line">my name is es6.</div></pre></td></tr></table></figure>
<blockquote>
<p>空格和换行都会被保留</p>
</blockquote>
<h2 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h2><p>允许使用 =&gt; 定义函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x =&gt; x+<span class="number">1</span></div></pre></td></tr></table></figure>
<p>等同于匿名函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote>
<p>这个箭头函数的作用域和其他函数有一些不同,如果不是严格模式，<code>this</code>关键字就是指向<code>window</code>，<strong>严格模式</strong>就是<code>undefined</code>，在构造函数里的<code>this</code>指向的是当前对象实例,如果<code>this</code>在一个对象的函数内则<code>this</code>指向的是这个对象</p>
</blockquote>
<p><em>据说箭头函数木有自己的<code>this</code></em></p>
<blockquote>
<p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> someObject = &#123;</div><div class="line">    name:<span class="string">'this is name'</span>,</div><div class="line">    someFunc:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;,</div><div class="line">    someArrowFunc:()=&gt;&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;,</div><div class="line">    someCallBackFunc:<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">        callback.bind(<span class="keyword">this</span>)();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'name is %s'</span>,someObject.someFunc());</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'name is %s'</span>,someObject.someArrowFunc());</div><div class="line"></div><div class="line">someObject.someCallBackFunc(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'name is %s'</span>,<span class="keyword">this</span>.name);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">someObject.someCallBackFunc(()=&gt;&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'name is %s'</span>,<span class="keyword">this</span>.name);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//name is this is name</span></div><div class="line"><span class="comment">//name is undefined</span></div><div class="line"><span class="comment">//name is this is name</span></div><div class="line"><span class="comment">//name is undefined</span></div></pre></td></tr></table></figure>
<blockquote>
<p>箭头函数会自动绑定 this 为定义时所在的上下文 ，而不是执行时候的上下文。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"Some Function"</span>;</div><div class="line"></div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'name is %s'</span>,<span class="keyword">this</span>.name);</div><div class="line">    &#125;,<span class="number">0</span>);</div><div class="line"></div><div class="line">    setTimeout(()=&gt;&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'name is %s'</span>,<span class="keyword">this</span>.name);</div><div class="line">    &#125;,<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">doSomething();</div><div class="line"></div><div class="line"><span class="comment">//name is undefined</span></div><div class="line"><span class="comment">//name is Some Function</span></div></pre></td></tr></table></figure>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><blockquote>
<p>先mark在这，以后填坑</p>
</blockquote>
<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">gen</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'hello'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'world'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> iter = gen();</div><div class="line"><span class="keyword">var</span> a = iter.next();</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;value:'hello', done:false&#125;</span></div><div class="line"><span class="keyword">var</span> b = iter.next();</div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123;value:'world', done:false&#125;</span></div><div class="line"><span class="keyword">var</span> c = iter.next();</div><div class="line"><span class="built_in">console</span>.log(c); <span class="comment">// &#123;value:true, done:true&#125;</span></div></pre></td></tr></table></figure>
<h2 id="destructuring"><a href="#destructuring" class="headerlink" title="destructuring"></a>destructuring</h2><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>
<p>看下面的例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cat = <span class="string">'ken'</span></div><div class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></div><div class="line"><span class="keyword">let</span> zoo = &#123;cat: cat, dog: dog&#125;</div><div class="line"><span class="built_in">console</span>.log(zoo)  <span class="comment">//Object &#123;cat: "ken", dog: "lili"&#125;</span></div></pre></td></tr></table></figure>
<p>用ES6完全可以像下面这么写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cat = <span class="string">'ken'</span></div><div class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></div><div class="line"><span class="keyword">let</span> zoo = &#123;cat, dog&#125;</div><div class="line"><span class="built_in">console</span>.log(zoo)  <span class="comment">//Object &#123;cat: "ken", dog: "lili"&#125;</span></div></pre></td></tr></table></figure>
<p>反过来可以这么写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dog = &#123;type: <span class="string">'animal'</span>, many: <span class="number">2</span>&#125;</div><div class="line"><span class="keyword">let</span> &#123; type, many&#125; = dog</div><div class="line"><span class="built_in">console</span>.log(type, many)   <span class="comment">//animal 2</span></div></pre></td></tr></table></figure>
<h2 id="import-export"><a href="#import-export" class="headerlink" title="import export"></a>import export</h2><blockquote>
<p>传统的写法</p>
</blockquote>
<p>定义:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//content.js</span></div><div class="line">define(<span class="string">'content.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'A cat'</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>require:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="built_in">require</span>([<span class="string">'./content.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">animal</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(animal);   <span class="comment">//A cat</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>CommonJS:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">var</span> animal = <span class="built_in">require</span>(<span class="string">'./content.js'</span>)</div><div class="line"></div><div class="line"><span class="comment">//content.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="string">'A cat'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>ES6写法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">import</span> animal <span class="keyword">from</span> <span class="string">'./content'</span></div><div class="line"></div><div class="line"><span class="comment">//content.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'A cat'</span></div></pre></td></tr></table></figure>
<h2 id="ES6-module的其他高级用法"><a href="#ES6-module的其他高级用法" class="headerlink" title="ES6 module的其他高级用法"></a>ES6 module的其他高级用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//content.js</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'A cat'</span>    </div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello!'</span></div><div class="line">&#125;    </div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> type = <span class="string">'dog'</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; say, type &#125; <span class="keyword">from</span> <span class="string">'./content'</span>  </div><div class="line"><span class="keyword">let</span> says = say()</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;type&#125;</span> says <span class="subst">$&#123;says&#125;</span>`</span>)  <span class="comment">//The dog says Hello</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里输入的时候要注意：大括号里面的变量名，必须与被导入模块（content.js）对外接口的名称相同。</p>
</blockquote>
<h3 id="修改变量名"><a href="#修改变量名" class="headerlink" title="修改变量名"></a>修改变量名</h3><p>此时我们不喜欢type这个变量名，因为它有可能重名，所以我们需要修改一下它的变量名。在es6中可以用as实现一键换名。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> animal, &#123; say, type <span class="keyword">as</span> animalType &#125; <span class="keyword">from</span> <span class="string">'./content'</span>  </div><div class="line"><span class="keyword">let</span> says = say()</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;animalType&#125;</span> says <span class="subst">$&#123;says&#125;</span> to <span class="subst">$&#123;animal&#125;</span>`</span>)  </div><div class="line"><span class="comment">//The dog says Hello to A cat</span></div></pre></td></tr></table></figure>
<h3 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h3><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（<code>*</code>）指定一个对象，所有输出值都加载在这个对象上面。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> animal, * <span class="keyword">as</span> content <span class="keyword">from</span> <span class="string">'./content'</span>  </div><div class="line"><span class="keyword">let</span> says = content.say()</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;content.type&#125;</span> says <span class="subst">$&#123;says&#125;</span> to <span class="subst">$&#123;animal&#125;</span>`</span>)  </div><div class="line"><span class="comment">//The dog says Hello to A cat</span></div></pre></td></tr></table></figure>
<p>通常星号<code>*</code>结合<code>as</code>一起使用比较合适。</p>
<hr>
<p>原处：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000004365693">30分钟掌握ES6/ES2015核心内容（上）（下）</a></li>
<li><a href="https://segmentfault.com/a/1190000003764489">ES6 走马观花</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;let-and-const&quot;&gt;&lt;a href=&quot;#let-and-const&quot; class=&quot;headerlink&quot; title=&quot;let and const&quot;&gt;&lt;/a&gt;let and const&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;函数级作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hello = &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(hello);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;test(); &lt;span class=&quot;comment&quot;&gt;// &#39;world&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(hello); &lt;span class=&quot;comment&quot;&gt;// Error: hello is not defined&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;块级作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hello = &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(hello); &lt;span class=&quot;comment&quot;&gt;// &#39;world&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(hello); &lt;span class=&quot;comment&quot;&gt;// &#39;world&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MarkDown</title>
    <link href="http://xmmwc.github.io/2016/08/28/markdown/"/>
    <id>http://xmmwc.github.io/2016/08/28/markdown/</id>
    <published>2016-08-27T17:55:56.000Z</published>
    <updated>2016-08-28T16:01:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p>
</blockquote>
<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。<strong>HTML 是一种发布的格式，Markdown 是一种书写的格式。</strong>就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>
<a id="more"></a>
<h1 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h1><hr>
<h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><blockquote>
<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>
</blockquote>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><blockquote>
<p>利用 = （最高阶标题）和 - （第二阶标题），例如：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">This is an H1</div><div class="line">=============</span></div><div class="line"></div><div class="line"><span class="section">This is an H2</div><div class="line">-------------</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 这是 H1</span></div><div class="line"></div><div class="line"><span class="section">## 这是 H2</span></div><div class="line"></div><div class="line"><span class="section">###### 这是 H6</span></div></pre></td></tr></table></figure>
<h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><blockquote>
<p>在每行的最前面加上 &gt; ：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span></div><div class="line"><span class="quote">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span></div><div class="line"><span class="quote">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span></div><div class="line"><span class="quote">&gt; </div><div class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span></div><div class="line"><span class="quote">&gt; id sem consectetuer libero luctus adipiscing.</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span></div><div class="line"></div><div class="line"><span class="quote">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</span></div></pre></td></tr></table></figure>
<blockquote>
<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; This is the first level of quoting.</span></div><div class="line"><span class="quote">&gt;</div><div class="line">&gt; &gt; This is nested blockquote.</span></div><div class="line"><span class="quote">&gt;</div><div class="line">&gt; Back to the first level.</span></div></pre></td></tr></table></figure>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p>
<blockquote>
<p>无序列表使用星号、加号或是减号作为列表标记：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*   </span>Red</div><div class="line"><span class="bullet">*   </span>Green</div><div class="line"><span class="bullet">*   </span>Blue</div></pre></td></tr></table></figure>
<p>等同于：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">+   </span>Red</div><div class="line"><span class="bullet">+   </span>Green</div><div class="line"><span class="bullet">+   </span>Blue</div></pre></td></tr></table></figure>
<p>也等同于：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">-   </span>Red</div><div class="line"><span class="bullet">-   </span>Green</div><div class="line"><span class="bullet">-   </span>Blue</div></pre></td></tr></table></figure>
<blockquote>
<p>有序列表则使用数字接着一个英文句点：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1.  </span>Bird</div><div class="line"><span class="bullet">2.  </span>McHale</div><div class="line"><span class="bullet">3.  </span>Parish</div></pre></td></tr></table></figure>
<p><strong>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果</strong>，上面的列表所产生的 HTML 标记为：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ol&gt;</div><div class="line"><span class="code">    &lt;li&gt;Bird&lt;/li&gt;</span></div><div class="line"><span class="code">    &lt;li&gt;McHale&lt;/li&gt;</span></div><div class="line"><span class="code">    &lt;li&gt;Parish&lt;/li&gt;</span></div><div class="line">&lt;/ol&gt;</div></pre></td></tr></table></figure>
<p>如果你的列表标记写成：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1.  </span>Bird</div><div class="line"><span class="bullet">1.  </span>McHale</div><div class="line"><span class="bullet">1.  </span>Parish</div></pre></td></tr></table></figure>
<p>或甚至是：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">3. </span>Bird</div><div class="line"><span class="bullet">1. </span>McHale</div><div class="line"><span class="bullet">8. </span>Parish</div></pre></td></tr></table></figure>
<p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>
<p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*   </span>A list item with a blockquote:</div><div class="line"></div><div class="line"><span class="code">	&gt; This is a blockquote</span></div><div class="line"><span class="code">    &gt; inside a list item.</span></div></pre></td></tr></table></figure>
<p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*   </span>一列表项包含一个列表区块：</div><div class="line"></div><div class="line"><span class="code">        &lt;代码写在这&gt;</span></div></pre></td></tr></table></figure>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><blockquote>
<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这是一个普通段落：</div><div class="line"></div><div class="line"><span class="code">	这是一个代码区块。</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Here is an example of AppleScript:</div><div class="line"></div><div class="line"><span class="code">    tell application "Foo"</span></div><div class="line"><span class="code">        beep</span></div><div class="line"><span class="code">    end tell</span></div></pre></td></tr></table></figure>
<p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span><span class="bullet">* *</span></div><div class="line"></div><div class="line"><span class="emphasis">***</span></div><div class="line"></div><div class="line"><span class="strong">*****</span></div><div class="line"></div><div class="line"><span class="bullet">- </span>- -</div><div class="line"></div><div class="line">---------------------------------------</div></pre></td></tr></table></figure>
<h1 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h1><hr>
<blockquote>
<p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p>
<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>
</blockquote>
<p>行内式的链接,只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">This is [<span class="string">an example</span>](<span class="link">http://example.com/ "Title"</span>) </div><div class="line">inline link.</div><div class="line"></div><div class="line">[<span class="string">This link</span>](<span class="link">http://example.net/</span>) has no title </div><div class="line">attribute.</div></pre></td></tr></table></figure>
<p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This is [<span class="string">an example</span>][<span class="symbol">id</span>] reference-style link.</div></pre></td></tr></table></figure>
<p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/  "Optional Title Here"</span></div></pre></td></tr></table></figure>
<p>链接内容定义的形式为：</p>
<ul>
<li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>接着一个冒号</li>
<li>接着一个以上的空格或制表符</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li>
</ul>
<blockquote>
<p><a href="http://www.appinn.com/markdown/">Markdown 语法说明 (简体中文版)</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Markdown 语法的目标是：成为一种适用于网络的书写语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。&lt;strong&gt;HTML 是一种发布的格式，Markdown 是一种书写的格式。&lt;/strong&gt;就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。&lt;/p&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="http://xmmwc.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>HEXO+Github</title>
    <link href="http://xmmwc.github.io/2016/08/27/hexo-github/"/>
    <id>http://xmmwc.github.io/2016/08/27/hexo-github/</id>
    <published>2016-08-27T09:32:59.000Z</published>
    <updated>2016-08-27T16:38:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>安装Node（必须）</p>
<p><em>略过。</em></p>
<p>安装Git（必须）</p>
<p><em>略过。</em></p>
<p>申请GitHub（必须）</p>
<p><em>略过。</em></p>
<h3 id="正式安装Hexo"><a href="#正式安装Hexo" class="headerlink" title="正式安装Hexo"></a>正式安装Hexo</h3><p>Node和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。</p>
<p>执行如下命令安装Hexo：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g hexo</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>初始化然后，执行init命令初始化hexo,命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。</p>
<p>生成静态页面</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> generate</div></pre></td></tr></table></figure>
<p>（hexo g也可以）</p>
<p>本地启动</p>
<p>启动本地服务，进行文章预览调试，命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> server</div></pre></td></tr></table></figure>
<p>浏览器输入<a href="http://localhost:4000">http://localhost:4000</a></p>
<h3 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h3><p>建立Repository</p>
<p>建立与你用户名对应的仓库，仓库名必须为<strong>your_user_name.github.io</strong>，固定写法。</p>
<p>现在我们需要_config.yml文件，来建立关联，</p>
<p>翻到最下面，改成这样子的</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">    type:</span> git</div><div class="line"><span class="attr">    repo:</span> https://github.com/XXX/XXX.github.io.git</div><div class="line"><span class="attr">    branch:</span> master</div></pre></td></tr></table></figure>
<p>然后执行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>然后，执行配置命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>然后再浏览器中输入 <a href="http://XXX.github.io/">http://XXX.github.io/</a> 就行了</p>
<h3 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h3><p>每次部署的步骤，可按以下三步来进行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>一些常用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate <span class="comment">#生成静态页面至public目录</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo version <span class="comment">#查看Hexo的版本</span></div></pre></td></tr></table></figure>
<blockquote>
<p>文／潘柏信（简书作者）<br>原文链接：<a href="http://www.jianshu.com/p/465830080ea9">http://www.jianshu.com/p/465830080ea9</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h3&gt;&lt;p&gt;安装Node（必须）&lt;/p&gt;
&lt;p&gt;&lt;em&gt;略过。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;安装Git（必须）&lt;/p&gt;
&lt;p&gt;&lt;em&gt;略过。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;申请GitHub（必须）&lt;/p&gt;
&lt;p&gt;&lt;em&gt;略过。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;正式安装Hexo&quot;&gt;&lt;a href=&quot;#正式安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;正式安装Hexo&quot;&gt;&lt;/a&gt;正式安装Hexo&lt;/h3&gt;&lt;p&gt;Node和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。&lt;/p&gt;
&lt;p&gt;执行如下命令安装Hexo：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo npm install -g hexo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
